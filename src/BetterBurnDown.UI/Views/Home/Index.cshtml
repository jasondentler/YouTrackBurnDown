<select id="sprint"></select>
<div id="chart"></div>
@section scripts
{
    @Scripts.Render("~/bundles/highcharts")
    <script type="text/javascript">
        var ISODate = {
            convert:
                function(input) {
                    if (!(typeof input === "string")) throw "ISODate, convert: input must be a string";
                    var d = input.match(/^(\d{4})-?(\d{2})-?(\d{2})[T ](\d{2}):?(\d{2}):?(\d{2})(\.\d+)?(Z|(?:([+-])(\d{2}):?(\d{2})))$/i);
                    if (!d) throw "ISODate, convert: Illegal format";
                    return new Date(
                        Date.UTC(
                            d[1], d[2] - 1, d[3],
                            d[4], d[5], d[6], d[7] || 0 % 1 * 1000 | 0
                        ) + (
                            d[8].toUpperCase() === "Z" ? 0 :
                                (d[10] * 3600 + d[11] * 60) * (d[9] === "-" ? 1000 : -1000)
                        )
                    );
                },
            format:
                function(date, utc) {
                    if (typeof date === "string") date = this.convert(date);
                    if (!(date instanceof Date)) throw "ISODate, format: t is not a date object";

                    var t = { 'FullYear': 0, 'Month': 0, 'Date': 0, 'Hours': 0, 'Minutes': 0, 'Seconds': 0 };
                    for (var key in t) {
                        if (t.hasOwnProperty(key)) t[key] = date["get" + (utc ? "UTC" : "") + key]()
                    }

                    return this.month[t.Month]
                        + " "
                        + this.ordinal(t.Date)
                        + ", "
                        + t.FullYear
                        + " @@ "
                        + this.clock12(t.Hours, t.Minutes);
                },
            month:
            [
                "January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"
            ],
            ordinal:
                function(n) {
                    return n + (
                        [
                            "th", "st", "nd", "rd"
                        ][((n % 100 / 10) | 0) === 1 ? 0 : n % 10 < 4 ? n % 10 : 0]
                    );
                },
            clock12:
                function(h24, m, s) {
                    h24 %= 24;
                    var h12 = (h24 % 12) || 12;
                    return h12 + ":" +
                        (m < 10 ? "0" + m : m) +
                        (isFinite(s) ? ":" + (s < 10 ? "0" + s : s) : "") +
                        (h24 < 12 ? "AM" : "PM");
                }
        };
    </script>
    <script type="text/javascript">
        console = console || {};
        console.log = console.log || function() {
        };

        $(function() {

            function tooltip() {
                var data = this.point.data;
                var content = $('<div />');
                var resolved = ISODate.convert(data.Timestamp);
                if (data && data.Label) {
                    console.log(data);
                    console.log(resolved);
                    var description = data.Description;
                    if (description.length > 140)
                        description = description.substr(0, 139) + '…';
                    content.append($('<span />').text(data.Label)
                        .css({ 'font-weight': 'bold', color: this.series.color }));
                    content.append(': ');
                    content.append($('<span />').text(description));
                    content.append('<br />');
                    content.append($('<span />').text('Resolved: ' + resolved.toLocaleString("en-US")));
                    content.append('<br />');
                    content.append($('<span />').text('Estimate: ' + (data.Estimate == null ? '?' : Math.round(data.Estimate))));
                    content.append('<br />');
                    content.append($('<span />').text('Remaining: ' + Math.round(data.OriginalValue) + ' (' + Math.round(data.Value) + '%)'));
                    return content.html();
                }

                content.append($('<span />').text(resolved.toLocaleString("en-US")));
                content.append('<br />');
                content.append($('<span />').text('Ideal: ' + Math.round(data.Value) + '%'));
                return content.html();
            }

            function xAxisFormatter() {
                return Highcharts.dateFormat('%a %d %b', this.value);
            }

            function pointOnClick(point) {
                if (point)
                    if (point.currentTarget)
                        if (point.currentTarget.data)
                            if (point.currentTarget.data.Url)
                                window.open(point.currentTarget.data.Url, "_blank");
            }

            function createMarkerFromPoint(point) {
                var marker = {};
                marker.y = point.Value;
                marker.x = new Date(ISODate.convert(point.Timestamp).toLocaleString() + " UTC");
                marker.data = point;
                return marker;
            }

            function convertPointToMarkers(point) {
                if (point.IsProjection)
                    return null;
                console.log(point);
                var marker = createMarkerFromPoint(point);
                if (point.Label && point.Description)
                    marker.name = point.Label + ": " + point.Description;
                return marker;
            }

            function convertProjectedMarkersToPoints(point) {
                if (!point.IsProjection && !(point.next != null && point.next.IsProjection))
                    return null;
                return createMarkerFromPoint(point);
            }

            function convertLinesToSeries(line, lineIndex) {
                console.log(line);
                var series = {};
                series.name = line.Description;
                series.color = Highcharts.getOptions().colors[lineIndex];

                series.data = $.map(line.Points, convertPointToMarkers);
                if (line.Description == 'Ideal') {
                    series.lineWidth = 4;
                    return series;
                } else {
                    var projectionSeries = {};
                    projectionSeries.name = series.name;
                    projectionSeries.color = series.color;
                    projectionSeries.dashStyle = 'dash';
                    projectionSeries.showInLegend = false;
                    projectionSeries.data = $.map(line.Points, convertProjectedMarkersToPoints);
                    return [series, projectionSeries];
                }
            }

            function loadSprint(sprintId) {
                $.getJSON('/api/graph/' + sprintId)
                    .done(function(data) {
                        console.log(data);

                        $.each(data.Lines, function() {
                            var line = this;
                            $.each(line.Points, function(idx) {
                                this.previous = idx == 0
                                    ? null
                                    : line.Points[idx - 1];
                                this.next = idx == line.Points.length
                                    ? null
                                    : line.Points[idx + 1];
                            });
                        });

                        var series = $.map(data.Lines, convertLinesToSeries);

                        var subtitle = ISODate.convert(data.Begin).toLocaleDateString("en-US") + ' - ' + ISODate.convert(data.End).toLocaleDateString("en-US");

                        var options =
                        {
                            chart: { type: 'spline' },
                            title: { text: 'Sprint ' + sprintId },
                            subtitle: { text: subtitle },
                            xAxis: { title: 'Time', type: 'datetime', labels: {formatter: xAxisFormatter} },
                            yAxis: { title: '% Work Remaining', min: 0, max: 100 },
                            series: series,
                            tooltip: { formatter: tooltip },
                            plotOptions: {
                                series: {
                                    point: {
                                        events: {
                                            click: pointOnClick
                                        }
                                    },
                                    marker: {
                                        enabled: false,
                                        states: {
                                            hover: {
                                                enabled: true
                                            }
                                        },
                                        symbol: 'circle'
                                    }
                                }
                            }
                        };
                        console.log(options);
                        $('#chart').highcharts(options);
                    });
            }

            function loadSprintList() {
                $.getJSON('/api/graph')
                    .done(function(data) {
                        $.each(data, function() {
                            var option = $('<option />').text(this.Id);
                            $('#sprint').append(option);
                            var start = new Date(this.Start);
                            var end = new Date(this.End);
                            var now = Date.now();

                            if (now >= start && now <= end) {
                                console.log('Current sprint is ' + this.Id);
                                $('#sprint').val(this.Id);
                                $('#sprint').trigger('change');
                            }
                        });
                    });
            }

            $('#sprint').change(function() {
                loadSprint($(this).val());
            });

            loadSprintList();

        });
    </script>
}
